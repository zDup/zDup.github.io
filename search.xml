<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2020%2F01%2F04%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[测试 奥力给]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇编入门]]></title>
    <url>%2F2019%2F05%2F22%2F%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[汇编机器的一些机器指令的使用如何在win10下写自己的汇编代码在以往的系统中，我们都可以通过我们的命令行cmd来写我们的汇编的程序，而在win10的环境下,则需要下一个软件DOSBox 0.74-2，然后通过这个软件在进行我们的汇编编程。以下是该软件具体安装与使用： 汇编笔记-DOSBox安装和使用 汇编实验一机器指令的使用的一些心得汇编实验题目12345678910111213141516171、使用debug，将下面程序段写入内存，逐条执行，根据指令执行后的实际情况填空。mov ax,ffffhmov ds,axmov ax,2200hmov ss,axmov sp,0100mov ax,[0] ;(ax=) add ax,[2] ;(ax=) mov bx,[4] ;(bx=) add bx,[6] ;(bx=) push ax ;(sp=) ；修改的内存单元的地址是 ；内容是 push bx ;(sp=) ；修改的内存单元的地址是 ；内容是 pop ax ;(sp=) ；（ax）= pop bx ;(sp=) ；（ax）= push [4] ;(sp=) ；修改的内存单元的地址是 ；内容是 pop [6] ;(sp=) ；修改的内存单元的地址是 ；内容是 2、重新执行上面的程序。在执行前4条语句后，使用-e 0FFFF:0 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8，再执行后面的语句，每条语句的执行结果会有什么变化？为什么？ 汇编的一些使用心得开始没有认真的审题，所以开始我是把程序是写在了一个记事本，但我建议大家还是先下一个Notepad++的一个记事本，通过他来写我们的汇编代码，因为他会有明确的行数，在我们出现errror的时候，我们就可以更快的找到错误。 当然写在asm文件的程序之前，需要我们有安装步骤中的四个exe文件，不然无法使用，对于我们的文件需要我们先masm 【我们的文件】.asm ，进行一个编译，如果你的代码没有错误，则service error 和warning error 应该都为0，之后我们就可以link我们的成功的文件：link 【我们的文件】.obj；记住是obj，不要忘记了。其中问你是不是创建obj，exe什么的直接回车就行了。 如何运行我们的程序呢？之后直接我们的【我们的文件】.exe就行了。 汇编的一些经常使用的指令a指令 debug之后输入的编译指令，输入我们的代码就行，之后你不想输入时，直接两次回车，我们就可以 输入我们的其他机器指令了 t指令 这是逐步执行我们的指令，然后我们就可以看里面的寄存器的具体情况了，当然还有每一步中的指令。这也是调试必用指令。 r指令 这是一个修改，查看cpu寄存器的一个指令，没有怎么使用过 d指令 这是查看我们内存内容。 q指令 退出我们的debug，非常重要 汇编运行过程中的一些图 t命令的使用： d命令的使用： 最后有些讲的不是很详细，主要还是看我链接的博客。]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[约瑟夫问题]]></title>
    <url>%2F2019%2F05%2F18%2F%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[约瑟夫问题的实现算法题目n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。） 输入12第一行为人数n;第二行为报数k。 输出1输出最后胜利者的标号数。 样例输入1210 4 样例输出15 算法分析由于是约瑟夫问题，这是一个超经典的一个题目，其中以前试过用数组做，不过好像要模拟其中的过程，所以其中的思维必须要清晰，而约瑟夫问题用单循环链表来做，逻辑会变得非常的简单，写下这篇博客，也是想记录链表的创建与删除，在约瑟夫问题上，链表真的起到了很大的作用。 算法代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&quot;iostream&quot;#include&quot;cmath&quot;#include&quot;cstring&quot;#include&quot;stdlib.h&quot;using namespace std;typedef struct node&#123; int data; node *next;&#125;Link;void creat(Link *&amp;L,int n) //创建链表 &#123; Link *p; Link *r; L=(Link *)malloc(sizeof(Link)); L-&gt;data=1; L-&gt;next=r; r=L; for(int i=2;i&lt;n+1;i++) &#123; p=(Link *)malloc(sizeof(Link)); p-&gt;data=i; r-&gt;next=p; r=p; &#125; r-&gt;next=L; L=r;&#125;int main()&#123; int n,k; cin&gt;&gt;n&gt;&gt;k; Link *L; Link *p; creat(L,n); int flag=1; //判断是否删除结点 while(L!=L-&gt;next) &#123; if(flag==k) &#123; p=L-&gt;next; L-&gt;next=p-&gt;next; free(p); flag=1; &#125; else &#123; L=L-&gt;next; flag++; &#125; &#125; cout&lt;&lt;L-&gt;data; return 0;&#125;]]></content>
      <categories>
        <category>算法分析</category>
      </categories>
      <tags>
        <tag>算法分析之单循环链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单背包问题]]></title>
    <url>%2F2019%2F05%2F16%2F%E7%AE%80%E5%8D%95%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[背包问题算法题目设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…Wn。 问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。 如果有满足条件的选择，则此背包有解，否则此背包问题无解 输入12输入数据有多行，包括放入的物品重量为s，物品的件数n，以及每件物品的重量（输入数据均为正整数）多组测试数据。 输出对于每个测试实例，若满足条件则输出“YES”，若不满足则输出“NO“ 样例输入1220 51 3 5 7 9 样例输出1YES 算法分析这是一个典型的动态规划问题，动态规划问题需要我们想的比较抽象一点，并且他常常又与递归结合，寻找最终的结果需要我们结合问题找到根本的执行步骤，例如此题，我们可以看作我们先找到目标的部分重量，然后再看剩下的目标重量是否能够通过我们已有的重量刚刚合适。W(n)=W(n-1)+Wi;其中Wi就是我们先找到的部分重量。 算法代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;using namespace std;int s,n;int flag=0;int a[10001];void Bag(int weight,int number)&#123; if(weight&gt;0&amp;&amp;number&gt;=0) &#123; for(int i=0;i&lt;number;i++) &#123; Bag(weight-a[number-i],number-1); &#125; &#125; else if(weight==0) &#123; flag=1; &#125; else if(number==0||weight&lt;0) &#123; return; &#125; &#125;int main()&#123; while(cin&gt;&gt;s&gt;&gt;n) &#123; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]; &#125; Bag(s,n-1); if(flag==1) &#123; cout&lt;&lt;&quot;YES&quot;; &#125; else &#123; cout&lt;&lt;&quot;NO&quot;; &#125; cout&lt;&lt;endl; flag=0; &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法分析</category>
      </categories>
      <tags>
        <tag>算法分析之动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[libsvm如何在java中进行使用]]></title>
    <url>%2F2019%2F05%2F08%2Flibsvm%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[libsvm的基本介绍Libsvm是台湾大学林智仁(Chih-Jen Lin)博士等开发设计的一个操作简单、易于使用、快速有效的通用SVM 软件包，可以解决分类问题（包括C- SVC、n - SVC ）、回归问题（包括e - SVR、n - SVR ）以及分布估计（one-class-SVM ）等问题，提供了线性、多项式、径向基和S形函数四种常用的核函数供选择，可以有效地解决多类问题、交叉验证选择参数、对不平衡样本加权、多类问题的概率估计等。Libsvm是一个开源的软件包，需要者都可以免费的从作者的个人主页http://www.csie.ntu.edu.tw/~cjlin/ 处获得。不仅提供了Libsvm的C++语言的算法源代码，还提供了Python、Java、R、MATLAB、Perl、Ruby、LabVIEW以及C#.net 等各种语言的接口，可以方便的在Windows 或UNIX 平台下使用，也便于科研工作者根据自己的需要进行改进（譬如设计使用符合自己特定问题需要的核函数等）。 libsvm的一般使用步骤 按照Libsvm软件包所要求的格式准备数据集； 对数据进行简单的缩放操作； 考虑选用RBF 核函数2 K(x,y) e x y = -g - ； 采用交叉验证选择最佳参数C与g； 采用最佳参数C与g对整个训练集进行训练获取支持向量机模型； 利用获取的模型进行测试与预测。 libsvm中数据的预处理由于libsvm实验中给出的数据并不是标准的libsvm数据模式，所以我们要对原本给出的测试数据和训练数据进行一个预处理，处理的方法我是才用的是excle的宏的使用，首先我们需要在网上下载一个叫FormatDataLibsvm.xls的一个表格。打开表格第一步一定要启用宏，这在excle的上方。 在excle的文件选项中打开我们需要预处理的数据文件，打开过程中设置我们数据格式，如下图，添加空格选项。 然后文件导入向导一直下一步，直到完成文件导入，然后在Excel上方搜索查看宏，并选择FormatDataToLibsvm的选项，点击执行，就能成功的改变数据的模式，每一列应该都是:的样子。 libsvm如何在java中实现 从介绍中的个人主页中下载资源，其中有一个java文件就是我们要使用的东西 创建一个项目，在创建两个包，一个来包导入java文件中libsvm文件的内容，也可以复制粘贴到我们命名libsvm的这个包中，另一个包来写存java根目录下的四个java文件，之后我会把我的数据文件和主函数comMain（自己创建）都会放在这个包中进行操作。大概情况如下： libsvm的使用主要是代码的调用，其中的数据文件中需要四个文本，一个测试数据test.txt，一个训练数据train.txt，一个模型数据moder_r .txt,一个输出数据out_r.txt，数据文件的路径可以随便放，但一定要知道路径，主函数代码如下： public static void main(String[] args) throws IOException { // TODO Auto-generated method stub String[] arg= {&quot;G:\\java\\libsvm\\src\\service\\trainfile\\trainSVM.txt&quot;, &quot;G:\\java\\libsvm\\src\\service\\trainfile\\model_r.txt&quot;}; String []parg= {&quot;G:\\java\\libsvm\\src\\service\\trainfile\\testSVM.txt&quot;, &quot;G:\\java\\libsvm\\src\\service\\trainfile\\model_r.txt&quot;,&quot;G:\\java\\libsvm\\src\\service\\trainfile\\out_r.txt&quot;}; System.out.println(&quot;.....SVM运行开始. . . . . .&quot;); svm_train t=new svm_train(); svm_predict p=new svm_predict(); t.main(arg); p.main(parg); } 运行结果中各个字母的意义都可以查到，运行结果如下： 其中也许你的预测的准确率有可能没出来，可以采用不是对象调用，而是直接使用svm_predict的方法，我也不是很清楚当时就可以显示我的准确率了。 后言​ libsvm其实还需要计算出其中的最优参数c与g，这个好像要使用python的方法，当然libsvm也存在要对数据进行一个归一化的处理，好像是调用svm_scale的方法，java中的调用我没有看懂，所以只算了一个预测的准确率。推荐使用windows的方法来实现libsvm，操作简易并且不需要安软件。 Python的使用方法 Windows的使用方法]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F05%2F08%2Ftest%2F</url>
    <content type="text"><![CDATA[这个是测试]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
